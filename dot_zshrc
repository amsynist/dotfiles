
#==========================================
#            Zsh Base Inits               #
#=========================================

export BAT_THEME="Nord"
export ZSH="$HOME/.oh-my-zsh"
source $ZSH/oh-my-zsh.sh
export TERM="xterm-256color"  # proper colors# Set name of the theme to
export EDITOR='nvim'
export PATH=$PATH:~/.local/share/nvim/mason/bin
export ZSH_DOTENV_PROMPT=false
export VIRTUAL_ENV_DISABLE_PROMPT=0
#THEME 
ZSH_THEME="robbyrussell"


#==========================================
#                Extras                  #  
#=========================================

## -> External/Plugins
init_extras() {
  echo "$HERE"
# source ~/.cache/wal/colors.sh
source ~/.oh-my-zsh/custom/plugins/zsh-autocomplete/zsh-autocomplete.plugin.zsh
source ~/.oh-my-zsh/plugins/aws/aws.plugin.zsh
plugins=(git zsh-autosuggestions zsh-syntax-highlighting)
ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(bracketed-paste up-line-or-search down-line-or-search expand-or-complete accept-line push-line-or-edit)

## -> init External Scripts 
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
eval "$(atuin init zsh)"
eval "$(starship init zsh)"
eval "$(zoxide init zsh)"
eval "$(thefuck --alias)"
}


#==========================================
#              Functions                  #  
#=========================================
function nnn () {
    command nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
    fi
}

function ya() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Api call helper
function api() {
  if [ "$1" = "get" ]; then
    curl -s "$2" | jless
  elif [ "$1" = "post" ]; then
    curl -s -X POST -d '{}' "$2" | jless
  else
    echo "Invalid operation. Use 'get' or 'post'."
  fi
}

rm_confirm() {
    local confirm
   
        # If not, proceed with the standard confirmation
        echo -n "Are you sure you wanna run 'rm -rf'? (yes/no): "
        read confirm
        if [ "$confirm" = "yes" ]; then
            command rm  "$@"
        else
            echo "Operation canceled."
        fi
 
}

# Override git commit with a custom function
git_custom() {
  if [[ $1 == "commit" ]]; then
    sh ~/ZERO/SCRIPTS/git_commit.sh 
  elif [[ $1 == "user" ]]; then  # Corrected the syntax here
    sh ~/ZERO/SCRIPTS/git_user.sh 
  elif [[ $1 == "push" ]]; then
    sh ~/ZERO/SCRIPTS/git_user.sh
        # Call the original git command for other cases
    command git "$@"

  else
    # Call the original git command for other cases
    command git "$@"
  fi
}

#==========================================
#              Aliases/Exports            #  
#=========================================

## -> Aliases

alias src="source ~/.zshrc"
alias v="nvim"
alias home="cd ~"
alias n="nnn"
alias lss="ya"
alias matrix="unimatrix -c blue -u 'Linux'"
alias config="v ~/.zshrc"
alias ls="exa --icons"
alias rm='rm_confirm'
alias git=git_custom
alias dots="chezmoi"
alias vida="cd $HOME/VIDA/"
alias work="cd $HOME/WORK/"
alias zero="cd $HOME/ZERO/"
alias cd="z"
alias net="gping www.google.com -c '#88C0D0,#B48EAD,#81A1C1,#8FBCBB'"
alias tree="tre"
alias gb="sh ~/ZERO/SCRIPTS/git_branch.sh"
alias gc="git commit"
alias mysql="/usr/local/mysql/bin/mysql"
## -> Exports

export NNN_FIFO=/tmp/nnn.fifo
export PATH=$PATH:/Users/zero/.spicetify e
export NNN_PLUG='p:previewimg;i:imgview;z:ipinfo'
export PYTHONPYCACHEPREFIX="${HOME}/.cache/Python"
export LDFLAGS="-L/opt/homebrew/opt/zlib/lib"
export CPPFLAGS="-I/opt/homebrew/opt/zlib/include"
export LDFLAGS="-L/opt/homebrew/opt/sqlite/lib"
export CPPFLAGS="-I/opt/homebrew/opt/sqlite/include"
export PATH="/opt/homebrew/opt/sqlite/bin:$PATH"
export NNN_TMPFILE="$HOME/.config/nnn/.lastd"
export EDITOR="$(which nvim)"
export VISUAL="$(which nvim)"
export MANPAGER="$(which nvim) +Man!"
export XDG_CONFIG_HOME="$HOME/.config"
export PATH="$HOME/.pyenv/bin:$PATH"
export LIBTOOL="/opt/homebrew/bin/glibtool"
export LIBTOOLIZE="/opt/homebrew/bin/glibtoolize"




# Function to check terminal size
check_terminal_size() {
    if [ "$(tput cols)" -gt 6 ] && [ "$(tput lines)" -gt 6 ]; then
        execute_if_terminal_size_bigger
    else 
  export STARSHIP_CONFIG=~/.config/starship_base.toml
  eval "$(starship init zsh)"
    fi
}

# Execute aliases and functions only if terminal size is bigger
execute_if_terminal_size_bigger() {
    
    # Export aliases,exports and functions,extras 
    init_extras
}

check_terminal_size
export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
autoload -U compinit
compinit -i

export GOPATH="${HOME}/.go"
export GOROOT="$(brew --prefix golang)/libexec"
export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"

test -d "${GOPATH}" || mkdir "${GOPATH}"
test -d "${GOPATH}/src/github.com" || mkdir -p "${GOPATH}/src/github.com"
