# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

export TERM="xterm-256color"  # proper colors# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
alias ssh="TERM=xterm-256color ssh"
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi
source ~/.cache/wal/colors.sh
source ~/.oh-my-zsh/custom/plugins/zsh-autocomplete/zsh-autocomplete.plugin.zsh
source ~/.oh-my-zsh/plugins/aws/aws.plugin.zsh
plugins=(git zsh-autosuggestions zsh-syntax-highlighting)
export ZSH_DOTENV_PROMPT=false
source $ZSH/oh-my-zsh.sh
ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(bracketed-paste up-line-or-search down-line-or-search expand-or-complete accept-line push-line-or-edit)
# User configuration
export VIRTUAL_ENV_DISABLE_PROMPT=0
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

alias src="source ~/.zshrc"
alias v="nvim"
alias home="cd ~"
export NNN_FIFO=/tmp/nnn.fifo
alias n="nnn"
function nnn () {
    command nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
    fi
}

function ya() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Api call helper
function api() {
  if [ "$1" = "get" ]; then
    curl -s "$2" | jless
  elif [ "$1" = "post" ]; then
    curl -s -X POST -d '{}' "$2" | jless
  else
    echo "Invalid operation. Use 'get' or 'post'."
  fi
}
alias lss="ya"
alias matrix="unimatrix -c blue -u 'Linux'"
alias config="v ~/.zshrc"
alias ls="exa --icons"
export NNN_PLUG='p:previewimg;i:imgview;z:ipinfo'
eval "$(starship init zsh)"
export PYTHONPYCACHEPREFIX="${HOME}/.cache/Python"
export LDFLAGS="-L/opt/homebrew/opt/zlib/lib"
export CPPFLAGS="-I/opt/homebrew/opt/zlib/include"
export LDFLAGS="-L/opt/homebrew/opt/sqlite/lib"
export CPPFLAGS="-I/opt/homebrew/opt/sqlite/include"
export PATH="/opt/homebrew/opt/sqlite/bin:$PATH"
export NNN_TMPFILE="$HOME/.config/nnn/.lastd"
export EDITOR="$(which nvim)"
export VISUAL="$(which nvim)"
export MANPAGER="$(which nvim) +Man!"
export XDG_CONFIG_HOME="$HOME/.config"
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
export LIBTOOL="/opt/homebrew/bin/glibtool"
export LIBTOOLIZE="/opt/homebrew/bin/glibtoolize"
eval "$(pyenv virtualenv-init -)"


eval "$(atuin init zsh)"

export PATH=$PATH:/Users/zero/.spicetify

alias rm='rm_confirm'

rm_confirm() {
    local confirm
   
        # If not, proceed with the standard confirmation
        echo -n "Are you sure you wanna run 'rm -rf'? (yes/no): "
        read confirm
        if [ "$confirm" = "yes" ]; then
            command rm  "$@"
        else
            echo "Operation canceled."
        fi
 
}


# Override git commit with a custom function
git_custom() {
  if [[ $1 == "commit" ]]; then
    sh ~/ZERO/SCRIPTS/git_commit.sh 
  elif [[ $1 == "user" ]]; then  # Corrected the syntax here
    sh ~/ZERO/SCRIPTS/git_user.sh 
  elif [[ $1 == "push" ]]; then
    sh ~/ZERO/SCRIPTS/git_user.sh
        # Call the original git command for other cases
    command git "$@"

  else
    # Call the original git command for other cases
    command git "$@"
  fi
}

# Set an alias for git_custom
alias git=git_custom

